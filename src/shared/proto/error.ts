/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable
// @generated from protobuf file "error.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message ErrorItem
 */
export interface ErrorItem {
    /**
     * @generated from protobuf field: string path = 2;
     */
    path: string;
    /**
     * @generated from protobuf field: optional string message = 3;
     */
    message?: string;
}
/**
 * @generated from protobuf message ErrorResponse
 */
export interface ErrorResponse {
    /**
     * @generated from protobuf field: ErrorCode code = 1;
     */
    code: ErrorCode;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: repeated ErrorItem errors = 3;
     */
    errors: ErrorItem[];
    /**
     * @generated from protobuf field: map<string, string> params = 4;
     */
    params: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf enum ErrorCode
 */
export enum ErrorCode {
    /**
     * @generated from protobuf enum value: NOT_EXISTS = 0;
     */
    NOT_EXISTS = 0,
    /**
     * @generated from protobuf enum value: SERVER_ERROR = 1;
     */
    SERVER_ERROR = 1,
    /**
     * @generated from protobuf enum value: VALIDATION_ERROR = 2;
     */
    VALIDATION_ERROR = 2,
    /**
     * @generated from protobuf enum value: UPLOAD_ERROR = 3;
     */
    UPLOAD_ERROR = 3,
    /**
     * @generated from protobuf enum value: NO_AUTH = 4;
     */
    NO_AUTH = 4,
    /**
     * @generated from protobuf enum value: GAME_STARTED = 5;
     */
    GAME_STARTED = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class ErrorItem$Type extends MessageType<ErrorItem> {
    constructor() {
        super("ErrorItem", [
            { no: 2, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ErrorItem>): ErrorItem {
        const message = { path: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ErrorItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ErrorItem): ErrorItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 2:
                    message.path = reader.string();
                    break;
                case /* optional string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ErrorItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 2; */
        if (message.path !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.path);
        /* optional string message = 3; */
        if (message.message !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ErrorItem
 */
export const ErrorItem = new ErrorItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ErrorResponse$Type extends MessageType<ErrorResponse> {
    constructor() {
        super("ErrorResponse", [
            { no: 1, name: "code", kind: "enum", T: () => ["ErrorCode", ErrorCode] },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "errors", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ErrorItem },
            { no: 4, name: "params", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<ErrorResponse>): ErrorResponse {
        const message = { code: 0, message: "", errors: [], params: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ErrorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ErrorResponse): ErrorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ErrorCode code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* repeated ErrorItem errors */ 3:
                    message.errors.push(ErrorItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, string> params */ 4:
                    this.binaryReadMap4(message.params, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: ErrorResponse["params"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ErrorResponse["params"] | undefined, val: ErrorResponse["params"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ErrorResponse.params");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: ErrorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ErrorCode code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* repeated ErrorItem errors = 3; */
        for (let i = 0; i < message.errors.length; i++)
            ErrorItem.internalBinaryWrite(message.errors[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> params = 4; */
        for (let k of Object.keys(message.params))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.params[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ErrorResponse
 */
export const ErrorResponse = new ErrorResponse$Type();
