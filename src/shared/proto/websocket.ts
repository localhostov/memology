/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable
// @generated from protobuf file "websocket.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message WebsocketClient
 */
export interface WebsocketClient {
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand history = 1;
     */
    history?: WebsocketClient_HistoryCommand;
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand
 */
export interface WebsocketClient_HistoryCommand {
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand.KickUser kickUser = 1;
     */
    kickUser?: WebsocketClient_HistoryCommand_KickUser;
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand.StartGame startGame = 2;
     */
    startGame?: WebsocketClient_HistoryCommand_StartGame;
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand.SendText sendText = 3;
     */
    sendText?: WebsocketClient_HistoryCommand_SendText;
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand.SetReady setReady = 4;
     */
    setReady?: WebsocketClient_HistoryCommand_SetReady;
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand.NewGame newGame = 5;
     */
    newGame?: WebsocketClient_HistoryCommand_NewGame;
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand.ShowDialog showDialog = 6;
     */
    showDialog?: WebsocketClient_HistoryCommand_ShowDialog;
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand.SetCallData setCallData = 7;
     */
    setCallData?: WebsocketClient_HistoryCommand_SetCallData;
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand.ChangeSettings changeSettings = 8;
     */
    changeSettings?: WebsocketClient_HistoryCommand_ChangeSettings;
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand.KickUser
 */
export interface WebsocketClient_HistoryCommand_KickUser {
    /**
     * @generated from protobuf field: uint32 vkId = 1;
     */
    vkId: number;
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand.StartGame
 */
export interface WebsocketClient_HistoryCommand_StartGame {
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand.SendText
 */
export interface WebsocketClient_HistoryCommand_SendText {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand.SetReady
 */
export interface WebsocketClient_HistoryCommand_SetReady {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand.NewGame
 */
export interface WebsocketClient_HistoryCommand_NewGame {
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand.ShowDialog
 */
export interface WebsocketClient_HistoryCommand_ShowDialog {
    /**
     * @generated from protobuf field: uint32 dialogId = 1;
     */
    dialogId: number;
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand.SetCallData
 */
export interface WebsocketClient_HistoryCommand_SetCallData {
    /**
     * @generated from protobuf field: optional string link = 1;
     */
    link?: string;
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand.ChangeSettings
 */
export interface WebsocketClient_HistoryCommand_ChangeSettings {
    /**
     * @generated from protobuf field: uint32 roundTime = 1;
     */
    roundTime: number;
}
/**
 * @generated from protobuf message WebsocketError
 */
export interface WebsocketError {
    /**
     * @generated from protobuf field: WebsocketErrorType type = 1;
     */
    type: WebsocketErrorType;
    /**
     * @generated from protobuf field: optional string message = 2;
     */
    message?: string;
}
/**
 * @generated from protobuf message WebsocketServer
 */
export interface WebsocketServer {
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents history = 1;
     */
    history?: WebsocketServer_HistoryEvents;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents
 */
export interface WebsocketServer_HistoryEvents {
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.UserJoined userJoined = 1;
     */
    userJoined?: WebsocketServer_HistoryEvents_UserJoined;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.UserLeaved userLeaved = 2;
     */
    userLeaved?: WebsocketServer_HistoryEvents_UserLeaved;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.LobbyInfo lobbyInfo = 3;
     */
    lobbyInfo?: WebsocketServer_HistoryEvents_LobbyInfo;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.ShowSnackbar showSnackbar = 4;
     */
    showSnackbar?: WebsocketServer_HistoryEvents_ShowSnackbar;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.StartLobby startLobby = 5;
     */
    startLobby?: WebsocketServer_HistoryEvents_StartLobby;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.TimerTick timerTick = 6;
     */
    timerTick?: WebsocketServer_HistoryEvents_TimerTick;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.NextStep nextStep = 7;
     */
    nextStep?: WebsocketServer_HistoryEvents_NextStep;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.FinishGame finishGame = 8;
     */
    finishGame?: WebsocketServer_HistoryEvents_FinishGame;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.GameGif gameGif = 9;
     */
    gameGif?: WebsocketServer_HistoryEvents_GameGif;
    /**
     * @generated from protobuf field: optional uint32 readyCounter = 10;
     */
    readyCounter?: number;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.NewGame newGame = 11;
     */
    newGame?: WebsocketServer_HistoryEvents_NewGame;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.ShowDialog showDialog = 12;
     */
    showDialog?: WebsocketServer_HistoryEvents_ShowDialog;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.CallData callData = 13;
     */
    callData?: WebsocketServer_HistoryEvents_CallData;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.SettingsUpdate settingsUpdate = 14;
     */
    settingsUpdate?: WebsocketServer_HistoryEvents_SettingsUpdate;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.LobbyUser
 */
export interface WebsocketServer_HistoryEvents_LobbyUser {
    /**
     * @generated from protobuf field: uint32 vkId = 1;
     */
    vkId: number;
    /**
     * @generated from protobuf field: bool isOwner = 2;
     */
    isOwner: boolean;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.UserJoined
 */
export interface WebsocketServer_HistoryEvents_UserJoined {
    /**
     * @generated from protobuf field: uint32 vkId = 1;
     */
    vkId: number;
    /**
     * @generated from protobuf field: bool isOwner = 2;
     */
    isOwner: boolean;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.UserLeaved
 */
export interface WebsocketServer_HistoryEvents_UserLeaved {
    /**
     * @generated from protobuf field: uint32 vkId = 1;
     */
    vkId: number;
    /**
     * @generated from protobuf field: optional uint32 newOwnerVkId = 2;
     */
    newOwnerVkId?: number;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.LobbyInfo
 */
export interface WebsocketServer_HistoryEvents_LobbyInfo {
    /**
     * @generated from protobuf field: repeated WebsocketServer.HistoryEvents.LobbyUser users = 1;
     */
    users: WebsocketServer_HistoryEvents_LobbyUser[];
    /**
     * @generated from protobuf field: optional string callLink = 2;
     */
    callLink?: string;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.LobbyInfo.Settings settings = 3;
     */
    settings?: WebsocketServer_HistoryEvents_LobbyInfo_Settings;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.LobbyInfo.Settings
 */
export interface WebsocketServer_HistoryEvents_LobbyInfo_Settings {
    /**
     * @generated from protobuf field: uint32 roundTime = 1;
     */
    roundTime: number;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.ShowSnackbar
 */
export interface WebsocketServer_HistoryEvents_ShowSnackbar {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.StartLobby
 */
export interface WebsocketServer_HistoryEvents_StartLobby {
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.TimerTick
 */
export interface WebsocketServer_HistoryEvents_TimerTick {
    /**
     * @generated from protobuf field: uint32 time = 1;
     */
    time: number;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.NextStep
 */
export interface WebsocketServer_HistoryEvents_NextStep {
    /**
     * @generated from protobuf field: string previousContext = 1;
     */
    previousContext: string;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.FinishGame
 */
export interface WebsocketServer_HistoryEvents_FinishGame {
    /**
     * @generated from protobuf field: repeated WebsocketServer.HistoryEvents.FinishGame.Dialog dialogs = 1;
     */
    dialogs: WebsocketServer_HistoryEvents_FinishGame_Dialog[];
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.FinishGame.Msg
 */
export interface WebsocketServer_HistoryEvents_FinishGame_Msg {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.FinishGame.Msg.VKData owner = 2;
     */
    owner?: WebsocketServer_HistoryEvents_FinishGame_Msg_VKData;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.FinishGame.Msg.VKData
 */
export interface WebsocketServer_HistoryEvents_FinishGame_Msg_VKData {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string photo = 3;
     */
    photo: string;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.FinishGame.Dialog
 */
export interface WebsocketServer_HistoryEvents_FinishGame_Dialog {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: repeated WebsocketServer.HistoryEvents.FinishGame.Msg msgs = 2;
     */
    msgs: WebsocketServer_HistoryEvents_FinishGame_Msg[];
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.GameGif
 */
export interface WebsocketServer_HistoryEvents_GameGif {
    /**
     * @generated from protobuf field: uint32 dialogId = 1;
     */
    dialogId: number;
    /**
     * @generated from protobuf field: bytes buffer = 2;
     */
    buffer: Uint8Array;
    /**
     * @generated from protobuf field: string vkAttachment = 3;
     */
    vkAttachment: string;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.NewGame
 */
export interface WebsocketServer_HistoryEvents_NewGame {
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.ShowDialog
 */
export interface WebsocketServer_HistoryEvents_ShowDialog {
    /**
     * @generated from protobuf field: uint32 dialogId = 1;
     */
    dialogId: number;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.CallData
 */
export interface WebsocketServer_HistoryEvents_CallData {
    /**
     * @generated from protobuf field: optional string link = 1;
     */
    link?: string;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.SettingsUpdate
 */
export interface WebsocketServer_HistoryEvents_SettingsUpdate {
    /**
     * @generated from protobuf field: uint32 roundTime = 1;
     */
    roundTime: number;
}
/**
 * @generated from protobuf message GetRoomInfoResponse
 */
export interface GetRoomInfoResponse {
    /**
     * @generated from protobuf field: string roomId = 1;
     */
    roomId: string;
    /**
     * @generated from protobuf field: uint32 ownerVkId = 2;
     */
    ownerVkId: number;
}
/**
 * @generated from protobuf enum WebsocketEvent
 */
export enum WebsocketEvent {
    /**
     * @generated from protobuf enum value: ERROR = 0;
     */
    ERROR = 0
}
/**
 * @generated from protobuf enum WebsocketErrorType
 */
export enum WebsocketErrorType {
    /**
     * @generated from protobuf enum value: NO_GAME = 0;
     */
    NO_GAME = 0,
    /**
     * @generated from protobuf enum value: NO_COMMAND = 1;
     */
    NO_COMMAND = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient$Type extends MessageType<WebsocketClient> {
    constructor() {
        super("WebsocketClient", [
            { no: 1, name: "history", kind: "message", T: () => WebsocketClient_HistoryCommand }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient>): WebsocketClient {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient): WebsocketClient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketClient.HistoryCommand history */ 1:
                    message.history = WebsocketClient_HistoryCommand.internalBinaryRead(reader, reader.uint32(), options, message.history);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketClient.HistoryCommand history = 1; */
        if (message.history)
            WebsocketClient_HistoryCommand.internalBinaryWrite(message.history, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient
 */
export const WebsocketClient = new WebsocketClient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand$Type extends MessageType<WebsocketClient_HistoryCommand> {
    constructor() {
        super("WebsocketClient.HistoryCommand", [
            { no: 1, name: "kickUser", kind: "message", T: () => WebsocketClient_HistoryCommand_KickUser },
            { no: 2, name: "startGame", kind: "message", T: () => WebsocketClient_HistoryCommand_StartGame },
            { no: 3, name: "sendText", kind: "message", T: () => WebsocketClient_HistoryCommand_SendText },
            { no: 4, name: "setReady", kind: "message", T: () => WebsocketClient_HistoryCommand_SetReady },
            { no: 5, name: "newGame", kind: "message", T: () => WebsocketClient_HistoryCommand_NewGame },
            { no: 6, name: "showDialog", kind: "message", T: () => WebsocketClient_HistoryCommand_ShowDialog },
            { no: 7, name: "setCallData", kind: "message", T: () => WebsocketClient_HistoryCommand_SetCallData },
            { no: 8, name: "changeSettings", kind: "message", T: () => WebsocketClient_HistoryCommand_ChangeSettings }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand>): WebsocketClient_HistoryCommand {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand): WebsocketClient_HistoryCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketClient.HistoryCommand.KickUser kickUser */ 1:
                    message.kickUser = WebsocketClient_HistoryCommand_KickUser.internalBinaryRead(reader, reader.uint32(), options, message.kickUser);
                    break;
                case /* WebsocketClient.HistoryCommand.StartGame startGame */ 2:
                    message.startGame = WebsocketClient_HistoryCommand_StartGame.internalBinaryRead(reader, reader.uint32(), options, message.startGame);
                    break;
                case /* WebsocketClient.HistoryCommand.SendText sendText */ 3:
                    message.sendText = WebsocketClient_HistoryCommand_SendText.internalBinaryRead(reader, reader.uint32(), options, message.sendText);
                    break;
                case /* WebsocketClient.HistoryCommand.SetReady setReady */ 4:
                    message.setReady = WebsocketClient_HistoryCommand_SetReady.internalBinaryRead(reader, reader.uint32(), options, message.setReady);
                    break;
                case /* WebsocketClient.HistoryCommand.NewGame newGame */ 5:
                    message.newGame = WebsocketClient_HistoryCommand_NewGame.internalBinaryRead(reader, reader.uint32(), options, message.newGame);
                    break;
                case /* WebsocketClient.HistoryCommand.ShowDialog showDialog */ 6:
                    message.showDialog = WebsocketClient_HistoryCommand_ShowDialog.internalBinaryRead(reader, reader.uint32(), options, message.showDialog);
                    break;
                case /* WebsocketClient.HistoryCommand.SetCallData setCallData */ 7:
                    message.setCallData = WebsocketClient_HistoryCommand_SetCallData.internalBinaryRead(reader, reader.uint32(), options, message.setCallData);
                    break;
                case /* WebsocketClient.HistoryCommand.ChangeSettings changeSettings */ 8:
                    message.changeSettings = WebsocketClient_HistoryCommand_ChangeSettings.internalBinaryRead(reader, reader.uint32(), options, message.changeSettings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketClient.HistoryCommand.KickUser kickUser = 1; */
        if (message.kickUser)
            WebsocketClient_HistoryCommand_KickUser.internalBinaryWrite(message.kickUser, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketClient.HistoryCommand.StartGame startGame = 2; */
        if (message.startGame)
            WebsocketClient_HistoryCommand_StartGame.internalBinaryWrite(message.startGame, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketClient.HistoryCommand.SendText sendText = 3; */
        if (message.sendText)
            WebsocketClient_HistoryCommand_SendText.internalBinaryWrite(message.sendText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketClient.HistoryCommand.SetReady setReady = 4; */
        if (message.setReady)
            WebsocketClient_HistoryCommand_SetReady.internalBinaryWrite(message.setReady, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketClient.HistoryCommand.NewGame newGame = 5; */
        if (message.newGame)
            WebsocketClient_HistoryCommand_NewGame.internalBinaryWrite(message.newGame, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketClient.HistoryCommand.ShowDialog showDialog = 6; */
        if (message.showDialog)
            WebsocketClient_HistoryCommand_ShowDialog.internalBinaryWrite(message.showDialog, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketClient.HistoryCommand.SetCallData setCallData = 7; */
        if (message.setCallData)
            WebsocketClient_HistoryCommand_SetCallData.internalBinaryWrite(message.setCallData, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketClient.HistoryCommand.ChangeSettings changeSettings = 8; */
        if (message.changeSettings)
            WebsocketClient_HistoryCommand_ChangeSettings.internalBinaryWrite(message.changeSettings, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand
 */
export const WebsocketClient_HistoryCommand = new WebsocketClient_HistoryCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand_KickUser$Type extends MessageType<WebsocketClient_HistoryCommand_KickUser> {
    constructor() {
        super("WebsocketClient.HistoryCommand.KickUser", [
            { no: 1, name: "vkId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand_KickUser>): WebsocketClient_HistoryCommand_KickUser {
        const message = { vkId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand_KickUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand_KickUser): WebsocketClient_HistoryCommand_KickUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vkId */ 1:
                    message.vkId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand_KickUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vkId = 1; */
        if (message.vkId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand.KickUser
 */
export const WebsocketClient_HistoryCommand_KickUser = new WebsocketClient_HistoryCommand_KickUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand_StartGame$Type extends MessageType<WebsocketClient_HistoryCommand_StartGame> {
    constructor() {
        super("WebsocketClient.HistoryCommand.StartGame", []);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand_StartGame>): WebsocketClient_HistoryCommand_StartGame {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand_StartGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand_StartGame): WebsocketClient_HistoryCommand_StartGame {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand_StartGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand.StartGame
 */
export const WebsocketClient_HistoryCommand_StartGame = new WebsocketClient_HistoryCommand_StartGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand_SendText$Type extends MessageType<WebsocketClient_HistoryCommand_SendText> {
    constructor() {
        super("WebsocketClient.HistoryCommand.SendText", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand_SendText>): WebsocketClient_HistoryCommand_SendText {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand_SendText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand_SendText): WebsocketClient_HistoryCommand_SendText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand_SendText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand.SendText
 */
export const WebsocketClient_HistoryCommand_SendText = new WebsocketClient_HistoryCommand_SendText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand_SetReady$Type extends MessageType<WebsocketClient_HistoryCommand_SetReady> {
    constructor() {
        super("WebsocketClient.HistoryCommand.SetReady", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand_SetReady>): WebsocketClient_HistoryCommand_SetReady {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand_SetReady>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand_SetReady): WebsocketClient_HistoryCommand_SetReady {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand_SetReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand.SetReady
 */
export const WebsocketClient_HistoryCommand_SetReady = new WebsocketClient_HistoryCommand_SetReady$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand_NewGame$Type extends MessageType<WebsocketClient_HistoryCommand_NewGame> {
    constructor() {
        super("WebsocketClient.HistoryCommand.NewGame", []);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand_NewGame>): WebsocketClient_HistoryCommand_NewGame {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand_NewGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand_NewGame): WebsocketClient_HistoryCommand_NewGame {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand_NewGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand.NewGame
 */
export const WebsocketClient_HistoryCommand_NewGame = new WebsocketClient_HistoryCommand_NewGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand_ShowDialog$Type extends MessageType<WebsocketClient_HistoryCommand_ShowDialog> {
    constructor() {
        super("WebsocketClient.HistoryCommand.ShowDialog", [
            { no: 1, name: "dialogId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand_ShowDialog>): WebsocketClient_HistoryCommand_ShowDialog {
        const message = { dialogId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand_ShowDialog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand_ShowDialog): WebsocketClient_HistoryCommand_ShowDialog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 dialogId */ 1:
                    message.dialogId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand_ShowDialog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 dialogId = 1; */
        if (message.dialogId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.dialogId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand.ShowDialog
 */
export const WebsocketClient_HistoryCommand_ShowDialog = new WebsocketClient_HistoryCommand_ShowDialog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand_SetCallData$Type extends MessageType<WebsocketClient_HistoryCommand_SetCallData> {
    constructor() {
        super("WebsocketClient.HistoryCommand.SetCallData", [
            { no: 1, name: "link", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand_SetCallData>): WebsocketClient_HistoryCommand_SetCallData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand_SetCallData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand_SetCallData): WebsocketClient_HistoryCommand_SetCallData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string link */ 1:
                    message.link = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand_SetCallData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string link = 1; */
        if (message.link !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.link);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand.SetCallData
 */
export const WebsocketClient_HistoryCommand_SetCallData = new WebsocketClient_HistoryCommand_SetCallData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand_ChangeSettings$Type extends MessageType<WebsocketClient_HistoryCommand_ChangeSettings> {
    constructor() {
        super("WebsocketClient.HistoryCommand.ChangeSettings", [
            { no: 1, name: "roundTime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand_ChangeSettings>): WebsocketClient_HistoryCommand_ChangeSettings {
        const message = { roundTime: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand_ChangeSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand_ChangeSettings): WebsocketClient_HistoryCommand_ChangeSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 roundTime */ 1:
                    message.roundTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand_ChangeSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 roundTime = 1; */
        if (message.roundTime !== 0)
            writer.tag(1, WireType.Varint).uint32(message.roundTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand.ChangeSettings
 */
export const WebsocketClient_HistoryCommand_ChangeSettings = new WebsocketClient_HistoryCommand_ChangeSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketError$Type extends MessageType<WebsocketError> {
    constructor() {
        super("WebsocketError", [
            { no: 1, name: "type", kind: "enum", T: () => ["WebsocketErrorType", WebsocketErrorType] },
            { no: 2, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketError>): WebsocketError {
        const message = { type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketError): WebsocketError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketErrorType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketErrorType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* optional string message = 2; */
        if (message.message !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketError
 */
export const WebsocketError = new WebsocketError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer$Type extends MessageType<WebsocketServer> {
    constructor() {
        super("WebsocketServer", [
            { no: 1, name: "history", kind: "message", T: () => WebsocketServer_HistoryEvents }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer>): WebsocketServer {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer): WebsocketServer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketServer.HistoryEvents history */ 1:
                    message.history = WebsocketServer_HistoryEvents.internalBinaryRead(reader, reader.uint32(), options, message.history);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketServer.HistoryEvents history = 1; */
        if (message.history)
            WebsocketServer_HistoryEvents.internalBinaryWrite(message.history, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer
 */
export const WebsocketServer = new WebsocketServer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents$Type extends MessageType<WebsocketServer_HistoryEvents> {
    constructor() {
        super("WebsocketServer.HistoryEvents", [
            { no: 1, name: "userJoined", kind: "message", T: () => WebsocketServer_HistoryEvents_UserJoined },
            { no: 2, name: "userLeaved", kind: "message", T: () => WebsocketServer_HistoryEvents_UserLeaved },
            { no: 3, name: "lobbyInfo", kind: "message", T: () => WebsocketServer_HistoryEvents_LobbyInfo },
            { no: 4, name: "showSnackbar", kind: "message", T: () => WebsocketServer_HistoryEvents_ShowSnackbar },
            { no: 5, name: "startLobby", kind: "message", T: () => WebsocketServer_HistoryEvents_StartLobby },
            { no: 6, name: "timerTick", kind: "message", T: () => WebsocketServer_HistoryEvents_TimerTick },
            { no: 7, name: "nextStep", kind: "message", T: () => WebsocketServer_HistoryEvents_NextStep },
            { no: 8, name: "finishGame", kind: "message", T: () => WebsocketServer_HistoryEvents_FinishGame },
            { no: 9, name: "gameGif", kind: "message", T: () => WebsocketServer_HistoryEvents_GameGif },
            { no: 10, name: "readyCounter", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "newGame", kind: "message", T: () => WebsocketServer_HistoryEvents_NewGame },
            { no: 12, name: "showDialog", kind: "message", T: () => WebsocketServer_HistoryEvents_ShowDialog },
            { no: 13, name: "callData", kind: "message", T: () => WebsocketServer_HistoryEvents_CallData },
            { no: 14, name: "settingsUpdate", kind: "message", T: () => WebsocketServer_HistoryEvents_SettingsUpdate }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents>): WebsocketServer_HistoryEvents {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents): WebsocketServer_HistoryEvents {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketServer.HistoryEvents.UserJoined userJoined */ 1:
                    message.userJoined = WebsocketServer_HistoryEvents_UserJoined.internalBinaryRead(reader, reader.uint32(), options, message.userJoined);
                    break;
                case /* WebsocketServer.HistoryEvents.UserLeaved userLeaved */ 2:
                    message.userLeaved = WebsocketServer_HistoryEvents_UserLeaved.internalBinaryRead(reader, reader.uint32(), options, message.userLeaved);
                    break;
                case /* WebsocketServer.HistoryEvents.LobbyInfo lobbyInfo */ 3:
                    message.lobbyInfo = WebsocketServer_HistoryEvents_LobbyInfo.internalBinaryRead(reader, reader.uint32(), options, message.lobbyInfo);
                    break;
                case /* WebsocketServer.HistoryEvents.ShowSnackbar showSnackbar */ 4:
                    message.showSnackbar = WebsocketServer_HistoryEvents_ShowSnackbar.internalBinaryRead(reader, reader.uint32(), options, message.showSnackbar);
                    break;
                case /* WebsocketServer.HistoryEvents.StartLobby startLobby */ 5:
                    message.startLobby = WebsocketServer_HistoryEvents_StartLobby.internalBinaryRead(reader, reader.uint32(), options, message.startLobby);
                    break;
                case /* WebsocketServer.HistoryEvents.TimerTick timerTick */ 6:
                    message.timerTick = WebsocketServer_HistoryEvents_TimerTick.internalBinaryRead(reader, reader.uint32(), options, message.timerTick);
                    break;
                case /* WebsocketServer.HistoryEvents.NextStep nextStep */ 7:
                    message.nextStep = WebsocketServer_HistoryEvents_NextStep.internalBinaryRead(reader, reader.uint32(), options, message.nextStep);
                    break;
                case /* WebsocketServer.HistoryEvents.FinishGame finishGame */ 8:
                    message.finishGame = WebsocketServer_HistoryEvents_FinishGame.internalBinaryRead(reader, reader.uint32(), options, message.finishGame);
                    break;
                case /* WebsocketServer.HistoryEvents.GameGif gameGif */ 9:
                    message.gameGif = WebsocketServer_HistoryEvents_GameGif.internalBinaryRead(reader, reader.uint32(), options, message.gameGif);
                    break;
                case /* optional uint32 readyCounter */ 10:
                    message.readyCounter = reader.uint32();
                    break;
                case /* WebsocketServer.HistoryEvents.NewGame newGame */ 11:
                    message.newGame = WebsocketServer_HistoryEvents_NewGame.internalBinaryRead(reader, reader.uint32(), options, message.newGame);
                    break;
                case /* WebsocketServer.HistoryEvents.ShowDialog showDialog */ 12:
                    message.showDialog = WebsocketServer_HistoryEvents_ShowDialog.internalBinaryRead(reader, reader.uint32(), options, message.showDialog);
                    break;
                case /* WebsocketServer.HistoryEvents.CallData callData */ 13:
                    message.callData = WebsocketServer_HistoryEvents_CallData.internalBinaryRead(reader, reader.uint32(), options, message.callData);
                    break;
                case /* WebsocketServer.HistoryEvents.SettingsUpdate settingsUpdate */ 14:
                    message.settingsUpdate = WebsocketServer_HistoryEvents_SettingsUpdate.internalBinaryRead(reader, reader.uint32(), options, message.settingsUpdate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketServer.HistoryEvents.UserJoined userJoined = 1; */
        if (message.userJoined)
            WebsocketServer_HistoryEvents_UserJoined.internalBinaryWrite(message.userJoined, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.UserLeaved userLeaved = 2; */
        if (message.userLeaved)
            WebsocketServer_HistoryEvents_UserLeaved.internalBinaryWrite(message.userLeaved, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.LobbyInfo lobbyInfo = 3; */
        if (message.lobbyInfo)
            WebsocketServer_HistoryEvents_LobbyInfo.internalBinaryWrite(message.lobbyInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.ShowSnackbar showSnackbar = 4; */
        if (message.showSnackbar)
            WebsocketServer_HistoryEvents_ShowSnackbar.internalBinaryWrite(message.showSnackbar, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.StartLobby startLobby = 5; */
        if (message.startLobby)
            WebsocketServer_HistoryEvents_StartLobby.internalBinaryWrite(message.startLobby, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.TimerTick timerTick = 6; */
        if (message.timerTick)
            WebsocketServer_HistoryEvents_TimerTick.internalBinaryWrite(message.timerTick, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.NextStep nextStep = 7; */
        if (message.nextStep)
            WebsocketServer_HistoryEvents_NextStep.internalBinaryWrite(message.nextStep, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.FinishGame finishGame = 8; */
        if (message.finishGame)
            WebsocketServer_HistoryEvents_FinishGame.internalBinaryWrite(message.finishGame, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.GameGif gameGif = 9; */
        if (message.gameGif)
            WebsocketServer_HistoryEvents_GameGif.internalBinaryWrite(message.gameGif, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 readyCounter = 10; */
        if (message.readyCounter !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.readyCounter);
        /* WebsocketServer.HistoryEvents.NewGame newGame = 11; */
        if (message.newGame)
            WebsocketServer_HistoryEvents_NewGame.internalBinaryWrite(message.newGame, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.ShowDialog showDialog = 12; */
        if (message.showDialog)
            WebsocketServer_HistoryEvents_ShowDialog.internalBinaryWrite(message.showDialog, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.CallData callData = 13; */
        if (message.callData)
            WebsocketServer_HistoryEvents_CallData.internalBinaryWrite(message.callData, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.SettingsUpdate settingsUpdate = 14; */
        if (message.settingsUpdate)
            WebsocketServer_HistoryEvents_SettingsUpdate.internalBinaryWrite(message.settingsUpdate, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents
 */
export const WebsocketServer_HistoryEvents = new WebsocketServer_HistoryEvents$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_LobbyUser$Type extends MessageType<WebsocketServer_HistoryEvents_LobbyUser> {
    constructor() {
        super("WebsocketServer.HistoryEvents.LobbyUser", [
            { no: 1, name: "vkId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "isOwner", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_LobbyUser>): WebsocketServer_HistoryEvents_LobbyUser {
        const message = { vkId: 0, isOwner: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_LobbyUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_LobbyUser): WebsocketServer_HistoryEvents_LobbyUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vkId */ 1:
                    message.vkId = reader.uint32();
                    break;
                case /* bool isOwner */ 2:
                    message.isOwner = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_LobbyUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vkId = 1; */
        if (message.vkId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vkId);
        /* bool isOwner = 2; */
        if (message.isOwner !== false)
            writer.tag(2, WireType.Varint).bool(message.isOwner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.LobbyUser
 */
export const WebsocketServer_HistoryEvents_LobbyUser = new WebsocketServer_HistoryEvents_LobbyUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_UserJoined$Type extends MessageType<WebsocketServer_HistoryEvents_UserJoined> {
    constructor() {
        super("WebsocketServer.HistoryEvents.UserJoined", [
            { no: 1, name: "vkId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "isOwner", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_UserJoined>): WebsocketServer_HistoryEvents_UserJoined {
        const message = { vkId: 0, isOwner: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_UserJoined>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_UserJoined): WebsocketServer_HistoryEvents_UserJoined {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vkId */ 1:
                    message.vkId = reader.uint32();
                    break;
                case /* bool isOwner */ 2:
                    message.isOwner = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_UserJoined, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vkId = 1; */
        if (message.vkId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vkId);
        /* bool isOwner = 2; */
        if (message.isOwner !== false)
            writer.tag(2, WireType.Varint).bool(message.isOwner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.UserJoined
 */
export const WebsocketServer_HistoryEvents_UserJoined = new WebsocketServer_HistoryEvents_UserJoined$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_UserLeaved$Type extends MessageType<WebsocketServer_HistoryEvents_UserLeaved> {
    constructor() {
        super("WebsocketServer.HistoryEvents.UserLeaved", [
            { no: 1, name: "vkId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "newOwnerVkId", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_UserLeaved>): WebsocketServer_HistoryEvents_UserLeaved {
        const message = { vkId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_UserLeaved>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_UserLeaved): WebsocketServer_HistoryEvents_UserLeaved {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vkId */ 1:
                    message.vkId = reader.uint32();
                    break;
                case /* optional uint32 newOwnerVkId */ 2:
                    message.newOwnerVkId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_UserLeaved, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vkId = 1; */
        if (message.vkId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vkId);
        /* optional uint32 newOwnerVkId = 2; */
        if (message.newOwnerVkId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.newOwnerVkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.UserLeaved
 */
export const WebsocketServer_HistoryEvents_UserLeaved = new WebsocketServer_HistoryEvents_UserLeaved$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_LobbyInfo$Type extends MessageType<WebsocketServer_HistoryEvents_LobbyInfo> {
    constructor() {
        super("WebsocketServer.HistoryEvents.LobbyInfo", [
            { no: 1, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WebsocketServer_HistoryEvents_LobbyUser },
            { no: 2, name: "callLink", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settings", kind: "message", T: () => WebsocketServer_HistoryEvents_LobbyInfo_Settings }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_LobbyInfo>): WebsocketServer_HistoryEvents_LobbyInfo {
        const message = { users: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_LobbyInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_LobbyInfo): WebsocketServer_HistoryEvents_LobbyInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated WebsocketServer.HistoryEvents.LobbyUser users */ 1:
                    message.users.push(WebsocketServer_HistoryEvents_LobbyUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string callLink */ 2:
                    message.callLink = reader.string();
                    break;
                case /* WebsocketServer.HistoryEvents.LobbyInfo.Settings settings */ 3:
                    message.settings = WebsocketServer_HistoryEvents_LobbyInfo_Settings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_LobbyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated WebsocketServer.HistoryEvents.LobbyUser users = 1; */
        for (let i = 0; i < message.users.length; i++)
            WebsocketServer_HistoryEvents_LobbyUser.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string callLink = 2; */
        if (message.callLink !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.callLink);
        /* WebsocketServer.HistoryEvents.LobbyInfo.Settings settings = 3; */
        if (message.settings)
            WebsocketServer_HistoryEvents_LobbyInfo_Settings.internalBinaryWrite(message.settings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.LobbyInfo
 */
export const WebsocketServer_HistoryEvents_LobbyInfo = new WebsocketServer_HistoryEvents_LobbyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_LobbyInfo_Settings$Type extends MessageType<WebsocketServer_HistoryEvents_LobbyInfo_Settings> {
    constructor() {
        super("WebsocketServer.HistoryEvents.LobbyInfo.Settings", [
            { no: 1, name: "roundTime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_LobbyInfo_Settings>): WebsocketServer_HistoryEvents_LobbyInfo_Settings {
        const message = { roundTime: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_LobbyInfo_Settings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_LobbyInfo_Settings): WebsocketServer_HistoryEvents_LobbyInfo_Settings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 roundTime */ 1:
                    message.roundTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_LobbyInfo_Settings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 roundTime = 1; */
        if (message.roundTime !== 0)
            writer.tag(1, WireType.Varint).uint32(message.roundTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.LobbyInfo.Settings
 */
export const WebsocketServer_HistoryEvents_LobbyInfo_Settings = new WebsocketServer_HistoryEvents_LobbyInfo_Settings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_ShowSnackbar$Type extends MessageType<WebsocketServer_HistoryEvents_ShowSnackbar> {
    constructor() {
        super("WebsocketServer.HistoryEvents.ShowSnackbar", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_ShowSnackbar>): WebsocketServer_HistoryEvents_ShowSnackbar {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_ShowSnackbar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_ShowSnackbar): WebsocketServer_HistoryEvents_ShowSnackbar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_ShowSnackbar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.ShowSnackbar
 */
export const WebsocketServer_HistoryEvents_ShowSnackbar = new WebsocketServer_HistoryEvents_ShowSnackbar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_StartLobby$Type extends MessageType<WebsocketServer_HistoryEvents_StartLobby> {
    constructor() {
        super("WebsocketServer.HistoryEvents.StartLobby", []);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_StartLobby>): WebsocketServer_HistoryEvents_StartLobby {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_StartLobby>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_StartLobby): WebsocketServer_HistoryEvents_StartLobby {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_StartLobby, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.StartLobby
 */
export const WebsocketServer_HistoryEvents_StartLobby = new WebsocketServer_HistoryEvents_StartLobby$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_TimerTick$Type extends MessageType<WebsocketServer_HistoryEvents_TimerTick> {
    constructor() {
        super("WebsocketServer.HistoryEvents.TimerTick", [
            { no: 1, name: "time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_TimerTick>): WebsocketServer_HistoryEvents_TimerTick {
        const message = { time: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_TimerTick>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_TimerTick): WebsocketServer_HistoryEvents_TimerTick {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 time */ 1:
                    message.time = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_TimerTick, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 time = 1; */
        if (message.time !== 0)
            writer.tag(1, WireType.Varint).uint32(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.TimerTick
 */
export const WebsocketServer_HistoryEvents_TimerTick = new WebsocketServer_HistoryEvents_TimerTick$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_NextStep$Type extends MessageType<WebsocketServer_HistoryEvents_NextStep> {
    constructor() {
        super("WebsocketServer.HistoryEvents.NextStep", [
            { no: 1, name: "previousContext", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_NextStep>): WebsocketServer_HistoryEvents_NextStep {
        const message = { previousContext: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_NextStep>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_NextStep): WebsocketServer_HistoryEvents_NextStep {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string previousContext */ 1:
                    message.previousContext = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_NextStep, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string previousContext = 1; */
        if (message.previousContext !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.previousContext);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.NextStep
 */
export const WebsocketServer_HistoryEvents_NextStep = new WebsocketServer_HistoryEvents_NextStep$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_FinishGame$Type extends MessageType<WebsocketServer_HistoryEvents_FinishGame> {
    constructor() {
        super("WebsocketServer.HistoryEvents.FinishGame", [
            { no: 1, name: "dialogs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WebsocketServer_HistoryEvents_FinishGame_Dialog }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_FinishGame>): WebsocketServer_HistoryEvents_FinishGame {
        const message = { dialogs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_FinishGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_FinishGame): WebsocketServer_HistoryEvents_FinishGame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated WebsocketServer.HistoryEvents.FinishGame.Dialog dialogs */ 1:
                    message.dialogs.push(WebsocketServer_HistoryEvents_FinishGame_Dialog.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_FinishGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated WebsocketServer.HistoryEvents.FinishGame.Dialog dialogs = 1; */
        for (let i = 0; i < message.dialogs.length; i++)
            WebsocketServer_HistoryEvents_FinishGame_Dialog.internalBinaryWrite(message.dialogs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.FinishGame
 */
export const WebsocketServer_HistoryEvents_FinishGame = new WebsocketServer_HistoryEvents_FinishGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_FinishGame_Msg$Type extends MessageType<WebsocketServer_HistoryEvents_FinishGame_Msg> {
    constructor() {
        super("WebsocketServer.HistoryEvents.FinishGame.Msg", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "owner", kind: "message", T: () => WebsocketServer_HistoryEvents_FinishGame_Msg_VKData }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_FinishGame_Msg>): WebsocketServer_HistoryEvents_FinishGame_Msg {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_FinishGame_Msg>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_FinishGame_Msg): WebsocketServer_HistoryEvents_FinishGame_Msg {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* WebsocketServer.HistoryEvents.FinishGame.Msg.VKData owner */ 2:
                    message.owner = WebsocketServer_HistoryEvents_FinishGame_Msg_VKData.internalBinaryRead(reader, reader.uint32(), options, message.owner);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_FinishGame_Msg, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* WebsocketServer.HistoryEvents.FinishGame.Msg.VKData owner = 2; */
        if (message.owner)
            WebsocketServer_HistoryEvents_FinishGame_Msg_VKData.internalBinaryWrite(message.owner, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.FinishGame.Msg
 */
export const WebsocketServer_HistoryEvents_FinishGame_Msg = new WebsocketServer_HistoryEvents_FinishGame_Msg$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_FinishGame_Msg_VKData$Type extends MessageType<WebsocketServer_HistoryEvents_FinishGame_Msg_VKData> {
    constructor() {
        super("WebsocketServer.HistoryEvents.FinishGame.Msg.VKData", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "photo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_FinishGame_Msg_VKData>): WebsocketServer_HistoryEvents_FinishGame_Msg_VKData {
        const message = { id: 0, name: "", photo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_FinishGame_Msg_VKData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_FinishGame_Msg_VKData): WebsocketServer_HistoryEvents_FinishGame_Msg_VKData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string photo */ 3:
                    message.photo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_FinishGame_Msg_VKData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string photo = 3; */
        if (message.photo !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.photo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.FinishGame.Msg.VKData
 */
export const WebsocketServer_HistoryEvents_FinishGame_Msg_VKData = new WebsocketServer_HistoryEvents_FinishGame_Msg_VKData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_FinishGame_Dialog$Type extends MessageType<WebsocketServer_HistoryEvents_FinishGame_Dialog> {
    constructor() {
        super("WebsocketServer.HistoryEvents.FinishGame.Dialog", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "msgs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WebsocketServer_HistoryEvents_FinishGame_Msg }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_FinishGame_Dialog>): WebsocketServer_HistoryEvents_FinishGame_Dialog {
        const message = { id: 0, msgs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_FinishGame_Dialog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_FinishGame_Dialog): WebsocketServer_HistoryEvents_FinishGame_Dialog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* repeated WebsocketServer.HistoryEvents.FinishGame.Msg msgs */ 2:
                    message.msgs.push(WebsocketServer_HistoryEvents_FinishGame_Msg.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_FinishGame_Dialog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* repeated WebsocketServer.HistoryEvents.FinishGame.Msg msgs = 2; */
        for (let i = 0; i < message.msgs.length; i++)
            WebsocketServer_HistoryEvents_FinishGame_Msg.internalBinaryWrite(message.msgs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.FinishGame.Dialog
 */
export const WebsocketServer_HistoryEvents_FinishGame_Dialog = new WebsocketServer_HistoryEvents_FinishGame_Dialog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_GameGif$Type extends MessageType<WebsocketServer_HistoryEvents_GameGif> {
    constructor() {
        super("WebsocketServer.HistoryEvents.GameGif", [
            { no: 1, name: "dialogId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "buffer", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "vkAttachment", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_GameGif>): WebsocketServer_HistoryEvents_GameGif {
        const message = { dialogId: 0, buffer: new Uint8Array(0), vkAttachment: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_GameGif>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_GameGif): WebsocketServer_HistoryEvents_GameGif {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 dialogId */ 1:
                    message.dialogId = reader.uint32();
                    break;
                case /* bytes buffer */ 2:
                    message.buffer = reader.bytes();
                    break;
                case /* string vkAttachment */ 3:
                    message.vkAttachment = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_GameGif, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 dialogId = 1; */
        if (message.dialogId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.dialogId);
        /* bytes buffer = 2; */
        if (message.buffer.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.buffer);
        /* string vkAttachment = 3; */
        if (message.vkAttachment !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.vkAttachment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.GameGif
 */
export const WebsocketServer_HistoryEvents_GameGif = new WebsocketServer_HistoryEvents_GameGif$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_NewGame$Type extends MessageType<WebsocketServer_HistoryEvents_NewGame> {
    constructor() {
        super("WebsocketServer.HistoryEvents.NewGame", []);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_NewGame>): WebsocketServer_HistoryEvents_NewGame {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_NewGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_NewGame): WebsocketServer_HistoryEvents_NewGame {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_NewGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.NewGame
 */
export const WebsocketServer_HistoryEvents_NewGame = new WebsocketServer_HistoryEvents_NewGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_ShowDialog$Type extends MessageType<WebsocketServer_HistoryEvents_ShowDialog> {
    constructor() {
        super("WebsocketServer.HistoryEvents.ShowDialog", [
            { no: 1, name: "dialogId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_ShowDialog>): WebsocketServer_HistoryEvents_ShowDialog {
        const message = { dialogId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_ShowDialog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_ShowDialog): WebsocketServer_HistoryEvents_ShowDialog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 dialogId */ 1:
                    message.dialogId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_ShowDialog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 dialogId = 1; */
        if (message.dialogId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.dialogId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.ShowDialog
 */
export const WebsocketServer_HistoryEvents_ShowDialog = new WebsocketServer_HistoryEvents_ShowDialog$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_CallData$Type extends MessageType<WebsocketServer_HistoryEvents_CallData> {
    constructor() {
        super("WebsocketServer.HistoryEvents.CallData", [
            { no: 1, name: "link", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_CallData>): WebsocketServer_HistoryEvents_CallData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_CallData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_CallData): WebsocketServer_HistoryEvents_CallData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string link */ 1:
                    message.link = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_CallData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string link = 1; */
        if (message.link !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.link);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.CallData
 */
export const WebsocketServer_HistoryEvents_CallData = new WebsocketServer_HistoryEvents_CallData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_SettingsUpdate$Type extends MessageType<WebsocketServer_HistoryEvents_SettingsUpdate> {
    constructor() {
        super("WebsocketServer.HistoryEvents.SettingsUpdate", [
            { no: 1, name: "roundTime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_SettingsUpdate>): WebsocketServer_HistoryEvents_SettingsUpdate {
        const message = { roundTime: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_SettingsUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_SettingsUpdate): WebsocketServer_HistoryEvents_SettingsUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 roundTime */ 1:
                    message.roundTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_SettingsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 roundTime = 1; */
        if (message.roundTime !== 0)
            writer.tag(1, WireType.Varint).uint32(message.roundTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.SettingsUpdate
 */
export const WebsocketServer_HistoryEvents_SettingsUpdate = new WebsocketServer_HistoryEvents_SettingsUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRoomInfoResponse$Type extends MessageType<GetRoomInfoResponse> {
    constructor() {
        super("GetRoomInfoResponse", [
            { no: 1, name: "roomId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ownerVkId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetRoomInfoResponse>): GetRoomInfoResponse {
        const message = { roomId: "", ownerVkId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRoomInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRoomInfoResponse): GetRoomInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string roomId */ 1:
                    message.roomId = reader.string();
                    break;
                case /* uint32 ownerVkId */ 2:
                    message.ownerVkId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRoomInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string roomId = 1; */
        if (message.roomId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.roomId);
        /* uint32 ownerVkId = 2; */
        if (message.ownerVkId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.ownerVkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetRoomInfoResponse
 */
export const GetRoomInfoResponse = new GetRoomInfoResponse$Type();
