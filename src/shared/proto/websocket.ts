/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable
// @generated from protobuf file "websocket.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message WebsocketClient
 */
export interface WebsocketClient {
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand history = 1;
     */
    history?: WebsocketClient_HistoryCommand;
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand
 */
export interface WebsocketClient_HistoryCommand {
    /**
     * @generated from protobuf field: string test = 1;
     */
    test: string;
}
/**
 * @generated from protobuf message WebsocketError
 */
export interface WebsocketError {
    /**
     * @generated from protobuf field: WebsocketErrorType type = 1;
     */
    type: WebsocketErrorType;
    /**
     * @generated from protobuf field: optional string message = 2;
     */
    message?: string;
}
/**
 * @generated from protobuf message WebsocketServer
 */
export interface WebsocketServer {
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents history = 1;
     */
    history?: WebsocketServer_HistoryEvents;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents
 */
export interface WebsocketServer_HistoryEvents {
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.UserJoined userJoined = 1;
     */
    userJoined?: WebsocketServer_HistoryEvents_UserJoined;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.UserLeaved userLeaved = 2;
     */
    userLeaved?: WebsocketServer_HistoryEvents_UserLeaved;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.LobbyInfo lobbyInfo = 3;
     */
    lobbyInfo?: WebsocketServer_HistoryEvents_LobbyInfo;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.UserJoined
 */
export interface WebsocketServer_HistoryEvents_UserJoined {
    /**
     * @generated from protobuf field: uint32 vkId = 1;
     */
    vkId: number;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.UserLeaved
 */
export interface WebsocketServer_HistoryEvents_UserLeaved {
    /**
     * @generated from protobuf field: uint32 vkId = 1;
     */
    vkId: number;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.LobbyInfo
 */
export interface WebsocketServer_HistoryEvents_LobbyInfo {
    /**
     * @generated from protobuf field: repeated uint32 vkIds = 1;
     */
    vkIds: number[];
}
/**
 * @generated from protobuf enum WebsocketEvent
 */
export enum WebsocketEvent {
    /**
     * @generated from protobuf enum value: ERROR = 0;
     */
    ERROR = 0
}
/**
 * @generated from protobuf enum WebsocketErrorType
 */
export enum WebsocketErrorType {
    /**
     * @generated from protobuf enum value: NO_GAME = 0;
     */
    NO_GAME = 0,
    /**
     * @generated from protobuf enum value: NO_COMMAND = 1;
     */
    NO_COMMAND = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient$Type extends MessageType<WebsocketClient> {
    constructor() {
        super("WebsocketClient", [
            { no: 1, name: "history", kind: "message", T: () => WebsocketClient_HistoryCommand }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient>): WebsocketClient {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient): WebsocketClient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketClient.HistoryCommand history */ 1:
                    message.history = WebsocketClient_HistoryCommand.internalBinaryRead(reader, reader.uint32(), options, message.history);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketClient.HistoryCommand history = 1; */
        if (message.history)
            WebsocketClient_HistoryCommand.internalBinaryWrite(message.history, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient
 */
export const WebsocketClient = new WebsocketClient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand$Type extends MessageType<WebsocketClient_HistoryCommand> {
    constructor() {
        super("WebsocketClient.HistoryCommand", [
            { no: 1, name: "test", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand>): WebsocketClient_HistoryCommand {
        const message = { test: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand): WebsocketClient_HistoryCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string test */ 1:
                    message.test = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string test = 1; */
        if (message.test !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.test);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand
 */
export const WebsocketClient_HistoryCommand = new WebsocketClient_HistoryCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketError$Type extends MessageType<WebsocketError> {
    constructor() {
        super("WebsocketError", [
            { no: 1, name: "type", kind: "enum", T: () => ["WebsocketErrorType", WebsocketErrorType] },
            { no: 2, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketError>): WebsocketError {
        const message = { type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketError): WebsocketError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketErrorType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketErrorType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* optional string message = 2; */
        if (message.message !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketError
 */
export const WebsocketError = new WebsocketError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer$Type extends MessageType<WebsocketServer> {
    constructor() {
        super("WebsocketServer", [
            { no: 1, name: "history", kind: "message", T: () => WebsocketServer_HistoryEvents }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer>): WebsocketServer {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer): WebsocketServer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketServer.HistoryEvents history */ 1:
                    message.history = WebsocketServer_HistoryEvents.internalBinaryRead(reader, reader.uint32(), options, message.history);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketServer.HistoryEvents history = 1; */
        if (message.history)
            WebsocketServer_HistoryEvents.internalBinaryWrite(message.history, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer
 */
export const WebsocketServer = new WebsocketServer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents$Type extends MessageType<WebsocketServer_HistoryEvents> {
    constructor() {
        super("WebsocketServer.HistoryEvents", [
            { no: 1, name: "userJoined", kind: "message", T: () => WebsocketServer_HistoryEvents_UserJoined },
            { no: 2, name: "userLeaved", kind: "message", T: () => WebsocketServer_HistoryEvents_UserLeaved },
            { no: 3, name: "lobbyInfo", kind: "message", T: () => WebsocketServer_HistoryEvents_LobbyInfo }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents>): WebsocketServer_HistoryEvents {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents): WebsocketServer_HistoryEvents {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketServer.HistoryEvents.UserJoined userJoined */ 1:
                    message.userJoined = WebsocketServer_HistoryEvents_UserJoined.internalBinaryRead(reader, reader.uint32(), options, message.userJoined);
                    break;
                case /* WebsocketServer.HistoryEvents.UserLeaved userLeaved */ 2:
                    message.userLeaved = WebsocketServer_HistoryEvents_UserLeaved.internalBinaryRead(reader, reader.uint32(), options, message.userLeaved);
                    break;
                case /* WebsocketServer.HistoryEvents.LobbyInfo lobbyInfo */ 3:
                    message.lobbyInfo = WebsocketServer_HistoryEvents_LobbyInfo.internalBinaryRead(reader, reader.uint32(), options, message.lobbyInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketServer.HistoryEvents.UserJoined userJoined = 1; */
        if (message.userJoined)
            WebsocketServer_HistoryEvents_UserJoined.internalBinaryWrite(message.userJoined, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.UserLeaved userLeaved = 2; */
        if (message.userLeaved)
            WebsocketServer_HistoryEvents_UserLeaved.internalBinaryWrite(message.userLeaved, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.LobbyInfo lobbyInfo = 3; */
        if (message.lobbyInfo)
            WebsocketServer_HistoryEvents_LobbyInfo.internalBinaryWrite(message.lobbyInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents
 */
export const WebsocketServer_HistoryEvents = new WebsocketServer_HistoryEvents$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_UserJoined$Type extends MessageType<WebsocketServer_HistoryEvents_UserJoined> {
    constructor() {
        super("WebsocketServer.HistoryEvents.UserJoined", [
            { no: 1, name: "vkId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_UserJoined>): WebsocketServer_HistoryEvents_UserJoined {
        const message = { vkId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_UserJoined>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_UserJoined): WebsocketServer_HistoryEvents_UserJoined {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vkId */ 1:
                    message.vkId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_UserJoined, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vkId = 1; */
        if (message.vkId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.UserJoined
 */
export const WebsocketServer_HistoryEvents_UserJoined = new WebsocketServer_HistoryEvents_UserJoined$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_UserLeaved$Type extends MessageType<WebsocketServer_HistoryEvents_UserLeaved> {
    constructor() {
        super("WebsocketServer.HistoryEvents.UserLeaved", [
            { no: 1, name: "vkId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_UserLeaved>): WebsocketServer_HistoryEvents_UserLeaved {
        const message = { vkId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_UserLeaved>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_UserLeaved): WebsocketServer_HistoryEvents_UserLeaved {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vkId */ 1:
                    message.vkId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_UserLeaved, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vkId = 1; */
        if (message.vkId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.UserLeaved
 */
export const WebsocketServer_HistoryEvents_UserLeaved = new WebsocketServer_HistoryEvents_UserLeaved$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_LobbyInfo$Type extends MessageType<WebsocketServer_HistoryEvents_LobbyInfo> {
    constructor() {
        super("WebsocketServer.HistoryEvents.LobbyInfo", [
            { no: 1, name: "vkIds", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_LobbyInfo>): WebsocketServer_HistoryEvents_LobbyInfo {
        const message = { vkIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_LobbyInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_LobbyInfo): WebsocketServer_HistoryEvents_LobbyInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 vkIds */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.vkIds.push(reader.uint32());
                    else
                        message.vkIds.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_LobbyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 vkIds = 1; */
        if (message.vkIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.vkIds.length; i++)
                writer.uint32(message.vkIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.LobbyInfo
 */
export const WebsocketServer_HistoryEvents_LobbyInfo = new WebsocketServer_HistoryEvents_LobbyInfo$Type();
