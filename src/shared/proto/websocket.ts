/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable
// @generated from protobuf file "websocket.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message WebsocketClient
 */
export interface WebsocketClient {
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand history = 1;
     */
    history?: WebsocketClient_HistoryCommand;
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand
 */
export interface WebsocketClient_HistoryCommand {
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand.KickUser kickUser = 1;
     */
    kickUser?: WebsocketClient_HistoryCommand_KickUser;
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand.StartGame startGame = 2;
     */
    startGame?: WebsocketClient_HistoryCommand_StartGame;
    /**
     * @generated from protobuf field: WebsocketClient.HistoryCommand.SendText sendText = 3;
     */
    sendText?: WebsocketClient_HistoryCommand_SendText;
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand.KickUser
 */
export interface WebsocketClient_HistoryCommand_KickUser {
    /**
     * @generated from protobuf field: uint32 vkId = 1;
     */
    vkId: number;
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand.StartGame
 */
export interface WebsocketClient_HistoryCommand_StartGame {
}
/**
 * @generated from protobuf message WebsocketClient.HistoryCommand.SendText
 */
export interface WebsocketClient_HistoryCommand_SendText {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message WebsocketError
 */
export interface WebsocketError {
    /**
     * @generated from protobuf field: WebsocketErrorType type = 1;
     */
    type: WebsocketErrorType;
    /**
     * @generated from protobuf field: optional string message = 2;
     */
    message?: string;
}
/**
 * @generated from protobuf message WebsocketServer
 */
export interface WebsocketServer {
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents history = 1;
     */
    history?: WebsocketServer_HistoryEvents;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents
 */
export interface WebsocketServer_HistoryEvents {
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.UserJoined userJoined = 1;
     */
    userJoined?: WebsocketServer_HistoryEvents_UserJoined;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.UserLeaved userLeaved = 2;
     */
    userLeaved?: WebsocketServer_HistoryEvents_UserLeaved;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.LobbyInfo lobbyInfo = 3;
     */
    lobbyInfo?: WebsocketServer_HistoryEvents_LobbyInfo;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.ShowSnackbar showSnackbar = 4;
     */
    showSnackbar?: WebsocketServer_HistoryEvents_ShowSnackbar;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.StartLobby startLobby = 5;
     */
    startLobby?: WebsocketServer_HistoryEvents_StartLobby;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.TimerTick timerTick = 6;
     */
    timerTick?: WebsocketServer_HistoryEvents_TimerTick;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.NextStep nextStep = 7;
     */
    nextStep?: WebsocketServer_HistoryEvents_NextStep;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.FinishGame finishGame = 8;
     */
    finishGame?: WebsocketServer_HistoryEvents_FinishGame;
    /**
     * @generated from protobuf field: WebsocketServer.HistoryEvents.GameGif gameGif = 9;
     */
    gameGif?: WebsocketServer_HistoryEvents_GameGif;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.LobbyUser
 */
export interface WebsocketServer_HistoryEvents_LobbyUser {
    /**
     * @generated from protobuf field: uint32 vkId = 1;
     */
    vkId: number;
    /**
     * @generated from protobuf field: bool isOwner = 2;
     */
    isOwner: boolean;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.UserJoined
 */
export interface WebsocketServer_HistoryEvents_UserJoined {
    /**
     * @generated from protobuf field: uint32 vkId = 1;
     */
    vkId: number;
    /**
     * @generated from protobuf field: bool isOwner = 2;
     */
    isOwner: boolean;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.UserLeaved
 */
export interface WebsocketServer_HistoryEvents_UserLeaved {
    /**
     * @generated from protobuf field: uint32 vkId = 1;
     */
    vkId: number;
    /**
     * @generated from protobuf field: optional uint32 newOwnerVkId = 2;
     */
    newOwnerVkId?: number;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.LobbyInfo
 */
export interface WebsocketServer_HistoryEvents_LobbyInfo {
    /**
     * @generated from protobuf field: repeated WebsocketServer.HistoryEvents.LobbyUser users = 1;
     */
    users: WebsocketServer_HistoryEvents_LobbyUser[];
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.ShowSnackbar
 */
export interface WebsocketServer_HistoryEvents_ShowSnackbar {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.StartLobby
 */
export interface WebsocketServer_HistoryEvents_StartLobby {
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.TimerTick
 */
export interface WebsocketServer_HistoryEvents_TimerTick {
    /**
     * @generated from protobuf field: uint32 time = 1;
     */
    time: number;
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.NextStep
 */
export interface WebsocketServer_HistoryEvents_NextStep {
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.FinishGame
 */
export interface WebsocketServer_HistoryEvents_FinishGame {
}
/**
 * @generated from protobuf message WebsocketServer.HistoryEvents.GameGif
 */
export interface WebsocketServer_HistoryEvents_GameGif {
    /**
     * @generated from protobuf field: bytes buffer = 1;
     */
    buffer: Uint8Array;
}
/**
 * @generated from protobuf enum WebsocketEvent
 */
export enum WebsocketEvent {
    /**
     * @generated from protobuf enum value: ERROR = 0;
     */
    ERROR = 0
}
/**
 * @generated from protobuf enum WebsocketErrorType
 */
export enum WebsocketErrorType {
    /**
     * @generated from protobuf enum value: NO_GAME = 0;
     */
    NO_GAME = 0,
    /**
     * @generated from protobuf enum value: NO_COMMAND = 1;
     */
    NO_COMMAND = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient$Type extends MessageType<WebsocketClient> {
    constructor() {
        super("WebsocketClient", [
            { no: 1, name: "history", kind: "message", T: () => WebsocketClient_HistoryCommand }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient>): WebsocketClient {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient): WebsocketClient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketClient.HistoryCommand history */ 1:
                    message.history = WebsocketClient_HistoryCommand.internalBinaryRead(reader, reader.uint32(), options, message.history);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketClient.HistoryCommand history = 1; */
        if (message.history)
            WebsocketClient_HistoryCommand.internalBinaryWrite(message.history, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient
 */
export const WebsocketClient = new WebsocketClient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand$Type extends MessageType<WebsocketClient_HistoryCommand> {
    constructor() {
        super("WebsocketClient.HistoryCommand", [
            { no: 1, name: "kickUser", kind: "message", T: () => WebsocketClient_HistoryCommand_KickUser },
            { no: 2, name: "startGame", kind: "message", T: () => WebsocketClient_HistoryCommand_StartGame },
            { no: 3, name: "sendText", kind: "message", T: () => WebsocketClient_HistoryCommand_SendText }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand>): WebsocketClient_HistoryCommand {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand): WebsocketClient_HistoryCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketClient.HistoryCommand.KickUser kickUser */ 1:
                    message.kickUser = WebsocketClient_HistoryCommand_KickUser.internalBinaryRead(reader, reader.uint32(), options, message.kickUser);
                    break;
                case /* WebsocketClient.HistoryCommand.StartGame startGame */ 2:
                    message.startGame = WebsocketClient_HistoryCommand_StartGame.internalBinaryRead(reader, reader.uint32(), options, message.startGame);
                    break;
                case /* WebsocketClient.HistoryCommand.SendText sendText */ 3:
                    message.sendText = WebsocketClient_HistoryCommand_SendText.internalBinaryRead(reader, reader.uint32(), options, message.sendText);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketClient.HistoryCommand.KickUser kickUser = 1; */
        if (message.kickUser)
            WebsocketClient_HistoryCommand_KickUser.internalBinaryWrite(message.kickUser, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketClient.HistoryCommand.StartGame startGame = 2; */
        if (message.startGame)
            WebsocketClient_HistoryCommand_StartGame.internalBinaryWrite(message.startGame, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketClient.HistoryCommand.SendText sendText = 3; */
        if (message.sendText)
            WebsocketClient_HistoryCommand_SendText.internalBinaryWrite(message.sendText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand
 */
export const WebsocketClient_HistoryCommand = new WebsocketClient_HistoryCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand_KickUser$Type extends MessageType<WebsocketClient_HistoryCommand_KickUser> {
    constructor() {
        super("WebsocketClient.HistoryCommand.KickUser", [
            { no: 1, name: "vkId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand_KickUser>): WebsocketClient_HistoryCommand_KickUser {
        const message = { vkId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand_KickUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand_KickUser): WebsocketClient_HistoryCommand_KickUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vkId */ 1:
                    message.vkId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand_KickUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vkId = 1; */
        if (message.vkId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand.KickUser
 */
export const WebsocketClient_HistoryCommand_KickUser = new WebsocketClient_HistoryCommand_KickUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand_StartGame$Type extends MessageType<WebsocketClient_HistoryCommand_StartGame> {
    constructor() {
        super("WebsocketClient.HistoryCommand.StartGame", []);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand_StartGame>): WebsocketClient_HistoryCommand_StartGame {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand_StartGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand_StartGame): WebsocketClient_HistoryCommand_StartGame {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand_StartGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand.StartGame
 */
export const WebsocketClient_HistoryCommand_StartGame = new WebsocketClient_HistoryCommand_StartGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketClient_HistoryCommand_SendText$Type extends MessageType<WebsocketClient_HistoryCommand_SendText> {
    constructor() {
        super("WebsocketClient.HistoryCommand.SendText", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketClient_HistoryCommand_SendText>): WebsocketClient_HistoryCommand_SendText {
        const message = { text: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketClient_HistoryCommand_SendText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketClient_HistoryCommand_SendText): WebsocketClient_HistoryCommand_SendText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketClient_HistoryCommand_SendText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketClient.HistoryCommand.SendText
 */
export const WebsocketClient_HistoryCommand_SendText = new WebsocketClient_HistoryCommand_SendText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketError$Type extends MessageType<WebsocketError> {
    constructor() {
        super("WebsocketError", [
            { no: 1, name: "type", kind: "enum", T: () => ["WebsocketErrorType", WebsocketErrorType] },
            { no: 2, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketError>): WebsocketError {
        const message = { type: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketError): WebsocketError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketErrorType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketErrorType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* optional string message = 2; */
        if (message.message !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketError
 */
export const WebsocketError = new WebsocketError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer$Type extends MessageType<WebsocketServer> {
    constructor() {
        super("WebsocketServer", [
            { no: 1, name: "history", kind: "message", T: () => WebsocketServer_HistoryEvents }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer>): WebsocketServer {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer): WebsocketServer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketServer.HistoryEvents history */ 1:
                    message.history = WebsocketServer_HistoryEvents.internalBinaryRead(reader, reader.uint32(), options, message.history);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketServer.HistoryEvents history = 1; */
        if (message.history)
            WebsocketServer_HistoryEvents.internalBinaryWrite(message.history, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer
 */
export const WebsocketServer = new WebsocketServer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents$Type extends MessageType<WebsocketServer_HistoryEvents> {
    constructor() {
        super("WebsocketServer.HistoryEvents", [
            { no: 1, name: "userJoined", kind: "message", T: () => WebsocketServer_HistoryEvents_UserJoined },
            { no: 2, name: "userLeaved", kind: "message", T: () => WebsocketServer_HistoryEvents_UserLeaved },
            { no: 3, name: "lobbyInfo", kind: "message", T: () => WebsocketServer_HistoryEvents_LobbyInfo },
            { no: 4, name: "showSnackbar", kind: "message", T: () => WebsocketServer_HistoryEvents_ShowSnackbar },
            { no: 5, name: "startLobby", kind: "message", T: () => WebsocketServer_HistoryEvents_StartLobby },
            { no: 6, name: "timerTick", kind: "message", T: () => WebsocketServer_HistoryEvents_TimerTick },
            { no: 7, name: "nextStep", kind: "message", T: () => WebsocketServer_HistoryEvents_NextStep },
            { no: 8, name: "finishGame", kind: "message", T: () => WebsocketServer_HistoryEvents_FinishGame },
            { no: 9, name: "gameGif", kind: "message", T: () => WebsocketServer_HistoryEvents_GameGif }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents>): WebsocketServer_HistoryEvents {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents): WebsocketServer_HistoryEvents {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WebsocketServer.HistoryEvents.UserJoined userJoined */ 1:
                    message.userJoined = WebsocketServer_HistoryEvents_UserJoined.internalBinaryRead(reader, reader.uint32(), options, message.userJoined);
                    break;
                case /* WebsocketServer.HistoryEvents.UserLeaved userLeaved */ 2:
                    message.userLeaved = WebsocketServer_HistoryEvents_UserLeaved.internalBinaryRead(reader, reader.uint32(), options, message.userLeaved);
                    break;
                case /* WebsocketServer.HistoryEvents.LobbyInfo lobbyInfo */ 3:
                    message.lobbyInfo = WebsocketServer_HistoryEvents_LobbyInfo.internalBinaryRead(reader, reader.uint32(), options, message.lobbyInfo);
                    break;
                case /* WebsocketServer.HistoryEvents.ShowSnackbar showSnackbar */ 4:
                    message.showSnackbar = WebsocketServer_HistoryEvents_ShowSnackbar.internalBinaryRead(reader, reader.uint32(), options, message.showSnackbar);
                    break;
                case /* WebsocketServer.HistoryEvents.StartLobby startLobby */ 5:
                    message.startLobby = WebsocketServer_HistoryEvents_StartLobby.internalBinaryRead(reader, reader.uint32(), options, message.startLobby);
                    break;
                case /* WebsocketServer.HistoryEvents.TimerTick timerTick */ 6:
                    message.timerTick = WebsocketServer_HistoryEvents_TimerTick.internalBinaryRead(reader, reader.uint32(), options, message.timerTick);
                    break;
                case /* WebsocketServer.HistoryEvents.NextStep nextStep */ 7:
                    message.nextStep = WebsocketServer_HistoryEvents_NextStep.internalBinaryRead(reader, reader.uint32(), options, message.nextStep);
                    break;
                case /* WebsocketServer.HistoryEvents.FinishGame finishGame */ 8:
                    message.finishGame = WebsocketServer_HistoryEvents_FinishGame.internalBinaryRead(reader, reader.uint32(), options, message.finishGame);
                    break;
                case /* WebsocketServer.HistoryEvents.GameGif gameGif */ 9:
                    message.gameGif = WebsocketServer_HistoryEvents_GameGif.internalBinaryRead(reader, reader.uint32(), options, message.gameGif);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WebsocketServer.HistoryEvents.UserJoined userJoined = 1; */
        if (message.userJoined)
            WebsocketServer_HistoryEvents_UserJoined.internalBinaryWrite(message.userJoined, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.UserLeaved userLeaved = 2; */
        if (message.userLeaved)
            WebsocketServer_HistoryEvents_UserLeaved.internalBinaryWrite(message.userLeaved, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.LobbyInfo lobbyInfo = 3; */
        if (message.lobbyInfo)
            WebsocketServer_HistoryEvents_LobbyInfo.internalBinaryWrite(message.lobbyInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.ShowSnackbar showSnackbar = 4; */
        if (message.showSnackbar)
            WebsocketServer_HistoryEvents_ShowSnackbar.internalBinaryWrite(message.showSnackbar, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.StartLobby startLobby = 5; */
        if (message.startLobby)
            WebsocketServer_HistoryEvents_StartLobby.internalBinaryWrite(message.startLobby, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.TimerTick timerTick = 6; */
        if (message.timerTick)
            WebsocketServer_HistoryEvents_TimerTick.internalBinaryWrite(message.timerTick, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.NextStep nextStep = 7; */
        if (message.nextStep)
            WebsocketServer_HistoryEvents_NextStep.internalBinaryWrite(message.nextStep, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.FinishGame finishGame = 8; */
        if (message.finishGame)
            WebsocketServer_HistoryEvents_FinishGame.internalBinaryWrite(message.finishGame, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* WebsocketServer.HistoryEvents.GameGif gameGif = 9; */
        if (message.gameGif)
            WebsocketServer_HistoryEvents_GameGif.internalBinaryWrite(message.gameGif, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents
 */
export const WebsocketServer_HistoryEvents = new WebsocketServer_HistoryEvents$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_LobbyUser$Type extends MessageType<WebsocketServer_HistoryEvents_LobbyUser> {
    constructor() {
        super("WebsocketServer.HistoryEvents.LobbyUser", [
            { no: 1, name: "vkId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "isOwner", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_LobbyUser>): WebsocketServer_HistoryEvents_LobbyUser {
        const message = { vkId: 0, isOwner: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_LobbyUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_LobbyUser): WebsocketServer_HistoryEvents_LobbyUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vkId */ 1:
                    message.vkId = reader.uint32();
                    break;
                case /* bool isOwner */ 2:
                    message.isOwner = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_LobbyUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vkId = 1; */
        if (message.vkId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vkId);
        /* bool isOwner = 2; */
        if (message.isOwner !== false)
            writer.tag(2, WireType.Varint).bool(message.isOwner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.LobbyUser
 */
export const WebsocketServer_HistoryEvents_LobbyUser = new WebsocketServer_HistoryEvents_LobbyUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_UserJoined$Type extends MessageType<WebsocketServer_HistoryEvents_UserJoined> {
    constructor() {
        super("WebsocketServer.HistoryEvents.UserJoined", [
            { no: 1, name: "vkId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "isOwner", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_UserJoined>): WebsocketServer_HistoryEvents_UserJoined {
        const message = { vkId: 0, isOwner: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_UserJoined>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_UserJoined): WebsocketServer_HistoryEvents_UserJoined {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vkId */ 1:
                    message.vkId = reader.uint32();
                    break;
                case /* bool isOwner */ 2:
                    message.isOwner = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_UserJoined, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vkId = 1; */
        if (message.vkId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vkId);
        /* bool isOwner = 2; */
        if (message.isOwner !== false)
            writer.tag(2, WireType.Varint).bool(message.isOwner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.UserJoined
 */
export const WebsocketServer_HistoryEvents_UserJoined = new WebsocketServer_HistoryEvents_UserJoined$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_UserLeaved$Type extends MessageType<WebsocketServer_HistoryEvents_UserLeaved> {
    constructor() {
        super("WebsocketServer.HistoryEvents.UserLeaved", [
            { no: 1, name: "vkId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "newOwnerVkId", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_UserLeaved>): WebsocketServer_HistoryEvents_UserLeaved {
        const message = { vkId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_UserLeaved>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_UserLeaved): WebsocketServer_HistoryEvents_UserLeaved {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vkId */ 1:
                    message.vkId = reader.uint32();
                    break;
                case /* optional uint32 newOwnerVkId */ 2:
                    message.newOwnerVkId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_UserLeaved, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vkId = 1; */
        if (message.vkId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vkId);
        /* optional uint32 newOwnerVkId = 2; */
        if (message.newOwnerVkId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.newOwnerVkId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.UserLeaved
 */
export const WebsocketServer_HistoryEvents_UserLeaved = new WebsocketServer_HistoryEvents_UserLeaved$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_LobbyInfo$Type extends MessageType<WebsocketServer_HistoryEvents_LobbyInfo> {
    constructor() {
        super("WebsocketServer.HistoryEvents.LobbyInfo", [
            { no: 1, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WebsocketServer_HistoryEvents_LobbyUser }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_LobbyInfo>): WebsocketServer_HistoryEvents_LobbyInfo {
        const message = { users: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_LobbyInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_LobbyInfo): WebsocketServer_HistoryEvents_LobbyInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated WebsocketServer.HistoryEvents.LobbyUser users */ 1:
                    message.users.push(WebsocketServer_HistoryEvents_LobbyUser.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_LobbyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated WebsocketServer.HistoryEvents.LobbyUser users = 1; */
        for (let i = 0; i < message.users.length; i++)
            WebsocketServer_HistoryEvents_LobbyUser.internalBinaryWrite(message.users[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.LobbyInfo
 */
export const WebsocketServer_HistoryEvents_LobbyInfo = new WebsocketServer_HistoryEvents_LobbyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_ShowSnackbar$Type extends MessageType<WebsocketServer_HistoryEvents_ShowSnackbar> {
    constructor() {
        super("WebsocketServer.HistoryEvents.ShowSnackbar", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_ShowSnackbar>): WebsocketServer_HistoryEvents_ShowSnackbar {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_ShowSnackbar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_ShowSnackbar): WebsocketServer_HistoryEvents_ShowSnackbar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_ShowSnackbar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.ShowSnackbar
 */
export const WebsocketServer_HistoryEvents_ShowSnackbar = new WebsocketServer_HistoryEvents_ShowSnackbar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_StartLobby$Type extends MessageType<WebsocketServer_HistoryEvents_StartLobby> {
    constructor() {
        super("WebsocketServer.HistoryEvents.StartLobby", []);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_StartLobby>): WebsocketServer_HistoryEvents_StartLobby {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_StartLobby>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_StartLobby): WebsocketServer_HistoryEvents_StartLobby {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_StartLobby, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.StartLobby
 */
export const WebsocketServer_HistoryEvents_StartLobby = new WebsocketServer_HistoryEvents_StartLobby$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_TimerTick$Type extends MessageType<WebsocketServer_HistoryEvents_TimerTick> {
    constructor() {
        super("WebsocketServer.HistoryEvents.TimerTick", [
            { no: 1, name: "time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_TimerTick>): WebsocketServer_HistoryEvents_TimerTick {
        const message = { time: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_TimerTick>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_TimerTick): WebsocketServer_HistoryEvents_TimerTick {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 time */ 1:
                    message.time = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_TimerTick, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 time = 1; */
        if (message.time !== 0)
            writer.tag(1, WireType.Varint).uint32(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.TimerTick
 */
export const WebsocketServer_HistoryEvents_TimerTick = new WebsocketServer_HistoryEvents_TimerTick$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_NextStep$Type extends MessageType<WebsocketServer_HistoryEvents_NextStep> {
    constructor() {
        super("WebsocketServer.HistoryEvents.NextStep", []);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_NextStep>): WebsocketServer_HistoryEvents_NextStep {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_NextStep>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_NextStep): WebsocketServer_HistoryEvents_NextStep {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_NextStep, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.NextStep
 */
export const WebsocketServer_HistoryEvents_NextStep = new WebsocketServer_HistoryEvents_NextStep$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_FinishGame$Type extends MessageType<WebsocketServer_HistoryEvents_FinishGame> {
    constructor() {
        super("WebsocketServer.HistoryEvents.FinishGame", []);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_FinishGame>): WebsocketServer_HistoryEvents_FinishGame {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_FinishGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_FinishGame): WebsocketServer_HistoryEvents_FinishGame {
        return target ?? this.create();
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_FinishGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.FinishGame
 */
export const WebsocketServer_HistoryEvents_FinishGame = new WebsocketServer_HistoryEvents_FinishGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WebsocketServer_HistoryEvents_GameGif$Type extends MessageType<WebsocketServer_HistoryEvents_GameGif> {
    constructor() {
        super("WebsocketServer.HistoryEvents.GameGif", [
            { no: 1, name: "buffer", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<WebsocketServer_HistoryEvents_GameGif>): WebsocketServer_HistoryEvents_GameGif {
        const message = { buffer: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WebsocketServer_HistoryEvents_GameGif>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WebsocketServer_HistoryEvents_GameGif): WebsocketServer_HistoryEvents_GameGif {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes buffer */ 1:
                    message.buffer = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WebsocketServer_HistoryEvents_GameGif, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes buffer = 1; */
        if (message.buffer.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.buffer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WebsocketServer.HistoryEvents.GameGif
 */
export const WebsocketServer_HistoryEvents_GameGif = new WebsocketServer_HistoryEvents_GameGif$Type();
