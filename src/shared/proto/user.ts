/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable
// @generated from protobuf file "user.proto" (syntax proto3)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message UserResponse
 */
export interface UserResponse {
}
/**
 * @generated from protobuf message UserResponse.UserItem
 */
export interface UserResponse_UserItem {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: uint32 likesCount = 3;
     */
    likesCount: number;
    /**
     * @generated from protobuf field: uint32 dislikesCount = 4;
     */
    dislikesCount: number;
    /**
     * @generated from protobuf field: uint32 favoritesCount = 5;
     */
    favoritesCount: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class UserResponse$Type extends MessageType<UserResponse> {
    constructor() {
        super("UserResponse", []);
    }
    create(value?: PartialMessage<UserResponse>): UserResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserResponse): UserResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UserResponse
 */
export const UserResponse = new UserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserResponse_UserItem$Type extends MessageType<UserResponse_UserItem> {
    constructor() {
        super("UserResponse.UserItem", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "likesCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "dislikesCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "favoritesCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UserResponse_UserItem>): UserResponse_UserItem {
        const message = { id: 0, name: "", likesCount: 0, dislikesCount: 0, favoritesCount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserResponse_UserItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserResponse_UserItem): UserResponse_UserItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* uint32 likesCount */ 3:
                    message.likesCount = reader.uint32();
                    break;
                case /* uint32 dislikesCount */ 4:
                    message.dislikesCount = reader.uint32();
                    break;
                case /* uint32 favoritesCount */ 5:
                    message.favoritesCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserResponse_UserItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* uint32 likesCount = 3; */
        if (message.likesCount !== 0)
            writer.tag(3, WireType.Varint).uint32(message.likesCount);
        /* uint32 dislikesCount = 4; */
        if (message.dislikesCount !== 0)
            writer.tag(4, WireType.Varint).uint32(message.dislikesCount);
        /* uint32 favoritesCount = 5; */
        if (message.favoritesCount !== 0)
            writer.tag(5, WireType.Varint).uint32(message.favoritesCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message UserResponse.UserItem
 */
export const UserResponse_UserItem = new UserResponse_UserItem$Type();
