/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter eslint_disable
// @generated from protobuf file "rating.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message MemeRatingResponse
 */
export interface MemeRatingResponse {
    /**
     * @generated from protobuf field: uint32 count = 1;
     */
    count: number;
    /**
     * @generated from protobuf field: repeated MemeRatingResponse.MemeItem items = 2;
     */
    items: MemeRatingResponse_MemeItem[];
}
/**
 * @generated from protobuf message MemeRatingResponse.MemeItem
 */
export interface MemeRatingResponse_MemeItem {
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string title = 2;
     */
    title: string;
    /**
     * @generated from protobuf field: string image = 3;
     */
    image: string;
    /**
     * @generated from protobuf field: optional string description = 4;
     */
    description?: string;
    /**
     * @generated from protobuf field: uint32 favoritesCount = 5;
     */
    favoritesCount: number;
    /**
     * @generated from protobuf field: bool isFavorites = 6;
     */
    isFavorites: boolean;
    /**
     * @generated from protobuf field: int32 likesCount = 7;
     */
    likesCount: number;
    /**
     * @generated from protobuf field: uint32 place = 8;
     */
    place: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class MemeRatingResponse$Type extends MessageType<MemeRatingResponse> {
    constructor() {
        super("MemeRatingResponse", [
            { no: 1, name: "count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MemeRatingResponse_MemeItem }
        ]);
    }
    create(value?: PartialMessage<MemeRatingResponse>): MemeRatingResponse {
        const message = { count: 0, items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MemeRatingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MemeRatingResponse): MemeRatingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 count */ 1:
                    message.count = reader.uint32();
                    break;
                case /* repeated MemeRatingResponse.MemeItem items */ 2:
                    message.items.push(MemeRatingResponse_MemeItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MemeRatingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 count = 1; */
        if (message.count !== 0)
            writer.tag(1, WireType.Varint).uint32(message.count);
        /* repeated MemeRatingResponse.MemeItem items = 2; */
        for (let i = 0; i < message.items.length; i++)
            MemeRatingResponse_MemeItem.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MemeRatingResponse
 */
export const MemeRatingResponse = new MemeRatingResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MemeRatingResponse_MemeItem$Type extends MessageType<MemeRatingResponse_MemeItem> {
    constructor() {
        super("MemeRatingResponse.MemeItem", [
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "favoritesCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "isFavorites", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "likesCount", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "place", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MemeRatingResponse_MemeItem>): MemeRatingResponse_MemeItem {
        const message = { id: 0, title: "", image: "", favoritesCount: 0, isFavorites: false, likesCount: 0, place: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MemeRatingResponse_MemeItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MemeRatingResponse_MemeItem): MemeRatingResponse_MemeItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string image */ 3:
                    message.image = reader.string();
                    break;
                case /* optional string description */ 4:
                    message.description = reader.string();
                    break;
                case /* uint32 favoritesCount */ 5:
                    message.favoritesCount = reader.uint32();
                    break;
                case /* bool isFavorites */ 6:
                    message.isFavorites = reader.bool();
                    break;
                case /* int32 likesCount */ 7:
                    message.likesCount = reader.int32();
                    break;
                case /* uint32 place */ 8:
                    message.place = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MemeRatingResponse_MemeItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string image = 3; */
        if (message.image !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.image);
        /* optional string description = 4; */
        if (message.description !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* uint32 favoritesCount = 5; */
        if (message.favoritesCount !== 0)
            writer.tag(5, WireType.Varint).uint32(message.favoritesCount);
        /* bool isFavorites = 6; */
        if (message.isFavorites !== false)
            writer.tag(6, WireType.Varint).bool(message.isFavorites);
        /* int32 likesCount = 7; */
        if (message.likesCount !== 0)
            writer.tag(7, WireType.Varint).int32(message.likesCount);
        /* uint32 place = 8; */
        if (message.place !== 0)
            writer.tag(8, WireType.Varint).uint32(message.place);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MemeRatingResponse.MemeItem
 */
export const MemeRatingResponse_MemeItem = new MemeRatingResponse_MemeItem$Type();
